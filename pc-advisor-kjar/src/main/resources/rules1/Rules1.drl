package rules1;

import com.pcadvisor.pcadvisorapi.dto.PriorityDTO;
import com.pcadvisor.pcadvisorapi.dto.AffinitiesDTO;
import com.pcadvisor.pcadvisorapi.model.CPU;
import com.pcadvisor.pcadvisorapi.model.GPU;
import com.pcadvisor.pcadvisorapi.drools.model.CpusGpus;
import com.pcadvisor.pcadvisorapi.drools.model.CpuGpuPair;

rule "CPU score pass priority"
lock-on-active true
    when
        priorityDTO: PriorityDTO($cpuPriority: cpuPriority)
        $cpu: CPU(score > ($cpuPriority * 9000 / 10) && score < (($cpuPriority+2) * 9000 / 10))
        $cpusgpus: CpusGpus()
    then
        $cpusgpus.addCpu($cpu);
    end

rule "GPU score pass priority"
lock-on-active true
    when
        priorityDTO: PriorityDTO($gpuPriority: gpuPriority)
        $gpu: GPU(score > ($gpuPriority * 20000 / 10) && score < (($gpuPriority+2) * 2000 / 10))
        $cpusgpus: CpusGpus()
    then
        $cpusgpus.addGpu($gpu);
        insert($cpusgpus);
        insert(new AffinitiesDTO("AMD", 450, 1000));
    end

rule "CpusGpus test"
    when
        $cpusgpus: CpusGpus()
        affinities: AffinitiesDTO($budget: budget)
    then
        for(CPU cpu: $cpusgpus.getCpus()) {
            for(GPU gpu: $cpusgpus.getGpus()) {
                insert(new CpuGpuPair(cpu, gpu));
            }
        }
        System.out.println($budget);
    end

rule "CPUGPU pairs"
    when
        $cpugpupair: CpuGpuPair($cpu:cpu, $gpu:gpu)
        affinities: AffinitiesDTO((budget/2) >= ($cpu.getPrice() + $gpu.getPrice()))
    then
        System.out.println($cpu.getDisplayName() + " + " + $gpu.getDisplayName());
    end