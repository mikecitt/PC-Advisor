package rules1;

import java.util.List;

import com.pcadvisor.pcadvisorapi.dto.PriorityDTO;
import com.pcadvisor.pcadvisorapi.dto.AffinitiesDTO;
import com.pcadvisor.pcadvisorapi.model.CPU;
import com.pcadvisor.pcadvisorapi.model.GPU;
import com.pcadvisor.pcadvisorapi.model.RAM;
import com.pcadvisor.pcadvisorapi.model.RamType;
import com.pcadvisor.pcadvisorapi.model.CPUBrand;
import com.pcadvisor.pcadvisorapi.model.Storage;
import com.pcadvisor.pcadvisorapi.model.StorageType;
import com.pcadvisor.pcadvisorapi.model.PowerSupply;
import com.pcadvisor.pcadvisorapi.model.PCBuild;
import com.pcadvisor.pcadvisorapi.drools.model.CpusGpus;
import com.pcadvisor.pcadvisorapi.drools.model.CpuGpuPair;

rule "CPU-GPU choose"
agenda-group "cpu-gpu-ram"
no-loop true
salience 200
    when
        priorityDTO: PriorityDTO($cpuPriority: cpuPriority, $gpuPriority: gpuPriority)
        $mb: Motherboard($chipset: chipset)
        $cpu: CPU(compatibleChipsets contains $chipset, score > ($cpuPriority * 900 + 2000) && score < (($cpuPriority+2) * 900 + 2000))
        $gpu: GPU(score > ($gpuPriority * 1500 + 1500) && score < (($gpuPriority+2) * 1500 + 1500))
    then
        insert(new PCBuild($cpu, $mb, $gpu));
    end

rule "brand pref"
agenda-group "cpu-gpu-ram"
no-loop true
salience 150
    when
        AffinitiesDTO($brandPref: brandPref != null) 
        Number($br: intValue > 0) from accumulate(
            PCBuild($t: this, $cpu: cpu) 
            and
            CPU(cpuBrand == $brandPref) from $cpu,
            count($t)
        )
        $build: PCBuild($cpu1: cpu)
        $cpu: CPU(cpuBrand != $brandPref) from $build
    then
        System.out.println("brisem --> " + $build);
        delete($build);
    end

rule "RAM choose"
agenda-group "cpu-gpu-ram"
no-loop true
salience 100
    when
        $pcBuild: PCBuild($cpu: cpu)
        priorityDTO: PriorityDTO($ramPriority: ramPriority)
        Number($minSize : intValue ) from accumulate(
            RAM($size : size, $size >= ($ramPriority * 8 / 4)), min($size)
        )
        (
            $ram: RAM(size == $minSize, ramType == RamType.KIT)
            and
            CPU(cpuBrand == CPUBrand.AMD) from $cpu
        ) or 
        (
            $ram: RAM(size == $minSize, ramType == RamType.SINGLE)
            and
            CPU(cpuBrand == CPUBrand.INTEL) from $cpu
        )
    then
        modify($pcBuild) { setRam($ram) };
    end

rule "Delete builds without ram"
agenda-group "cpu-gpu-ram"
salience 90
    when
        pcBuild: PCBuild(ram == null)
    then
        delete(pcBuild);
    end

rule "Power Supply choose"
agenda-group "cpu-gpu-ram"
no-loop true
salience 80
    when
        $pcBuild: PCBuild($powerUsage: getPowerUsage())
        $psu: PowerSupply(wattage == (($powerUsage + 300) - ($powerUsage + 300)%100))
    then
        modify($pcBuild) {setPowerSupply($psu)};
    end

rule "storageMin default set"
agenda-group "cpu-gpu-ram"
no-loop true
salience 75
    when
    $affinities: AffinitiesDTO($storageMin: storageMin == null)
    priorityDTO: PriorityDTO($cpuPriority: cpuPriority, $gpuPriority: gpuPriority, $ramPriority: ramPriority)
    then
        int average = ($cpuPriority + $gpuPriority + $ramPriority) / 3;
        int size = -1;
        if(average > 7)
            size = 500;
        else if(average > 5)
            size = 240;
        else
            size = 120;
        modify($affinities) { setStorageMin(size) };
    end

rule "Hard drives choose only SSD"
agenda-group "cpu-gpu-ram"
no-loop true
salience 70
    when
    AffinitiesDTO($storageMin: storageMin <= 500)
    $pcBuild: PCBuild($storages: storage)
    Number(intValue == 0) from accumulate(
        Storage($t: this) from $storages,
        count($t)
    )
    Number($minSize : intValue ) from accumulate(
        Storage($size : size >= $storageMin, type == StorageType.SSD), min($size)
    )
    $storage: Storage(size == $minSize, type == StorageType.SSD)
    then
        modify($pcBuild) { getStorage().add($storage) };
    end

rule "Hard drives choose both SSD and HDD"
agenda-group "cpu-gpu-ram"
no-loop true
salience 70
    when
    AffinitiesDTO($storageMin: storageMin > 500)
    $pcBuild: PCBuild($storages: storage)
    Number(intValue == 0) from accumulate(
        Storage($t: this) from $storages,
        count($t)
    )
    Number($minSizeSSD : intValue ) from accumulate(
        Storage($size : size > 240, type == StorageType.SSD), min($size)
    )
    $storageSSD: Storage(size == $minSizeSSD, type == StorageType.SSD)
    Number($minSizeHDD : intValue ) from accumulate(
        Storage($size : size > ($storageMin - 240), type == StorageType.HDD), min($size)
    )
    $storageHDD: Storage(size == $minSizeHDD, type == StorageType.HDD)
    then
        modify($pcBuild) { getStorage().add($storageSSD), getStorage().add($storageHDD) };
    end

rule "increase budget if no builds for budget"
agenda-group "cpu-gpu-ram"
salience 30
    when
        $affinities: AffinitiesDTO($budget: budget != null)
        Number(intValue == 0) from accumulate(
            PCBuild($t: this, getPrice() < $budget),
            count($t)
        )
    then
        modify($affinities) { setBudget($affinities.getBudget() + 100) };
        System.out.println("Povecavam budzet za 100e, sada je: " + $affinities.getBudget());
    end

rule "delete expensive builds"
agenda-group "cpu-gpu-ram"
    when
        $affinities: AffinitiesDTO($budget: budget != null)
        Number(intValue > 0) from accumulate(
            PCBuild($t: this, getPrice() < $budget),
            count($t)
        )
        $pcBuild: PCBuild(getPrice() > $budget)
    then
        delete($pcBuild);
    end