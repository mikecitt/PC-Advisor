package rules1;

import java.util.List;

import com.pcadvisor.pcadvisorapi.dto.PriorityDTO;
import com.pcadvisor.pcadvisorapi.dto.AffinitiesDTO;
import com.pcadvisor.pcadvisorapi.model.CPU;
import com.pcadvisor.pcadvisorapi.model.GPU;
import com.pcadvisor.pcadvisorapi.model.RAM;
import com.pcadvisor.pcadvisorapi.model.Chipset;
import com.pcadvisor.pcadvisorapi.model.RamType;
import com.pcadvisor.pcadvisorapi.model.CPUBrand;
import com.pcadvisor.pcadvisorapi.model.Storage;
import com.pcadvisor.pcadvisorapi.model.PowerSupply;
import com.pcadvisor.pcadvisorapi.model.PCBuild;
import com.pcadvisor.pcadvisorapi.drools.model.CpusGpus;
import com.pcadvisor.pcadvisorapi.drools.model.CpuGpuPair;

rule "CPU-GPU choose"
agenda-group "cpu-gpu-ram"
no-loop true
salience 100
    when
        priorityDTO: PriorityDTO($cpuPriority: cpuPriority, $gpuPriority: gpuPriority)
        $mb: Motherboard()
        $cpu: CPU(score > ($cpuPriority * 900) && score < (($cpuPriority+2) * 900))
        AffinitiesDTO(brandPref == null)
        or
        (
            AffinitiesDTO($brandPref: brandPref) 
            and
            CPU(cpuBrand == $brandPref)
        )
        $gpu: GPU(score > ($gpuPriority * 2000) && score < (($gpuPriority+2) * 2000))
        affinities: AffinitiesDTO()
    then
        insert(new PCBuild($cpu, $mb, $gpu));
    end

rule "RAM choose"
agenda-group "cpu-gpu-ram"
no-loop true
salience 100
    when
        $pcBuild: PCBuild($cpu: cpu)
        priorityDTO: PriorityDTO($ramPriority: ramPriority)
        Number($minSize : intValue ) from accumulate(
            RAM($size : size, $size >= ($ramPriority * 8 / 5)), min($size)
        )
        (
            $ram: RAM(size == $minSize, ramType == RamType.KIT)
            and
            CPU(cpuBrand == CPUBrand.AMD) from $cpu
        ) or 
        (
            $ram: RAM(size == $minSize, ramType == RamType.SINGLE)
            and
            CPU(cpuBrand == CPUBrand.INTEL) from $cpu
        )
        
    then
        modify($pcBuild) { setRam($ram) };
    end

rule "Power Supply choose"
agenda-group "cpu-gpu-ram"
no-loop true
salience 100
    when
        $pcBuild: PCBuild($powerUsage: getPowerUsage())
        $psu: PowerSupply(wattage == (($powerUsage + 300) - ($powerUsage + 300)%100))
    then
        modify($pcBuild) {setPowerSupply($psu)};
    end

rule "Check Budget"
agenda-group "cpu-gpu-ram"
no-loop true
salience 100
    when
        pcBuild: PCBuild($price: getPrice())
        affinities: AffinitiesDTO(budget < $price)
    then
        delete(pcBuild);
    end

rule "no builds in memory"
agenda-group "cpu-gpu-ram"
no-loop true
salience 50
    when
        not PCBuild()
        $affinities: AffinitiesDTO()
    then
        System.out.println("Povecavam budzet za 100e");
        modify($affinities) { setBudget($affinities.getBudget() + 100) };
    end

rule "final"
agenda-group "finish"
no-loop true
    when
        $pcBuild: PCBuild(ram == null)
    then
        delete($pcBuild);
        //System.out.println(pcBuild);
    end



